

type letter = { 
  character : string; 
  pt : int; 
  count <ocaml mutable> : int;
}

type coordinate = (string * int)

type direction = [
  | Across <json name="across">
  | Down <json name="down">
]

type bonus_status = [
  | Double_letter <json name="double_letter">
  | Double_word <json name="double_word">
  | Triple_letter <json name="triple_letter">
  | Triple_word <json name="triple_word">
  | Center <json name="center">
  | Normal <json name="normal">
]

type play = {
  word : string;  
  direction : direction;
  coordinate : coordinate;
}

type move = [
  | Play <json name="play"> of play 
  | SwitchAll <json name="switchall">
  | SwitchSome <json name="switchsome"> of string list 
  | Pass <json name="pass">
  | Shuffle <json name="shuffle">
  | End <json name="end">
]

type tile = {
    bonus : bonus_status;
    letter: string option;
  }

type player = [
  | Human <json name="human"> of string
  | AI <json name="ai"> of (string * int)
]

type scrabble_board = tile list list

type score_board = (player * int) list

type letter_bag = letter list

type player_rack = (player * (letter list))

type game_state =
{
  board : scrabble_board;
  score_board : score_board;
  letter_bag : letter_bag;
  player_racks : player_rack list;
  turn : int;
  counter : int;
  quit : bool;
}